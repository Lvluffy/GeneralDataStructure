package com.luffy.datastructure.commonlib.tree;

/**
 * Created by lvlufei on 2019/11/6
 *
 * @name 树
 * @desc --
 * <p>
 * 特点：结构直观。通过树问题来考察"递归算法"掌握的熟练程度。
 * <p>
 * 树的形状：普通二叉树、平衡二叉树、完全二叉树、四叉树、多叉树、特殊的树（红黑树、白平衡二叉搜索树）
 * <p>
 * 树的考察：树的遍历、树的序列化
 * <p>
 * 树的遍历：前序遍历（Preorder Traversal）、中序遍历（Inoeder Traversal）、后序遍历（Postoder Traversal）
 * 前序遍历：先访问根节点，然后访问左子树，最后访问右子树。
 * 中序遍历：先访问左子树，然后访问根节点，最后访问右子树。常用的场景：二叉搜索树。
 * 后序遍历：先访问左子树，然后访问右子树，最后访问根节点。
 * <p>
 * 题目：二叉搜索中第k小的元素
 * 给定一个二叉搜索树，编写一个函数来查找其中第k个最小的元素。
 * <p>
 * 说明：
 * 你可以假设k总是有效的，1<=k<=二叉搜索树元素个数。
 */
public class TreeApply {
}
