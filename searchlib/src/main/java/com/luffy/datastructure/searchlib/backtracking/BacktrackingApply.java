package com.luffy.datastructure.searchlib.backtracking;

/**
 * Created by lvlufei on 2019/11/12
 *
 * @name 回溯
 * <p>
 * 递归和回溯的关系密不可分：
 * 1，递归的基本性质就是函数调用，在处理问题的时候，递归往往是把一个大规模的问题不断地变小，然后进行推导的过程。
 * 2，回溯则是利用递归的性质，从问题的起始点出发，不断地进行尝试，回头一步甚至多步再做选择，直到最终抵达终点的过程。
 * <p>
 * 基本思想：
 * 回溯实际上是一种试探算法，这种算法跟暴力搜索最大的不同在于，在回溯算法里，是一步一步地小心翼翼地进行向前试探，会对每一步探测到的情况进行评估，
 * 如果当前的情况已经无法满足要求，那么就没有必要继续进行下去，也就是说，它可以帮助我们避免走很多弯路。
 * <p>
 * 特点：
 * 回溯算法的特点在于，当出现非法的情况时，算法可以回退到之前的情景，可以是返回一步，有时候甚至可以返回多步，然后再去尝试别的路径和办法。
 * 这也就意味着，想要采用回溯算法，就必须保证，每次都有多种尝试的可能。
 * <p>
 * 解题步骤：
 * 1，判断当前情况是否非法，如果非法就立即返回；
 * 2，当前情况是否已经满足递归结束条件，如果是就将当前结果保存起来并返回；
 * 3，当前情况下，遍历所有可能出现的情况并进行下一步的尝试；
 * 4，递归完毕后，立即回溯，回溯的方法就是取消前一步进行的尝试。
 */
public class BacktrackingApply {
}
